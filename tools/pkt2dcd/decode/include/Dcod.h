/* ========================================================================== */
/*	Dcod.h                                                                    */
/* ========================================================================== */
/*	Copyright (c) WildPackets, Inc. 1989-2007. All rights reserved.           */

#ifndef DCOD_H
#define DCOD_H

#include "AGTypes.h"
#include "MediaTypes.h"
#include "PeekPlug.h"

#ifdef __cplusplus
extern "C" {
#endif

#if defined(_WIN32)
#pragma pack(push,1)
#endif

#if defined(_WIN32)
#ifdef _DCOD_DLL
#define _DCOD_API __declspec(dllexport)
#else
#define _DCOD_API
#endif
#endif

typedef void* DECODE_LIB_REF;
typedef void* DECODE_LIB_STATE;

typedef UInt32 DECODE_LIB_VERSION;
#define DECODE_LIB_VERSION_CURRENT					((DECODE_LIB_VERSION)0x01020005)

typedef UInt32 DECODE_SYSTEM_ID;
typedef UInt32 DECODE_RESULT;
#define DECODE_RESULT_TYPE_MASK						0xFF000000
#define DECODE_RESULT_TYPE_ERROR					0x01000000
#define DECODE_RESULT_TYPE_RUNTIME					0x02000000
#define DECODE_RESULT_NOERROR						((DECODE_RESULT)0L)
#define DECODE_RESULT_UNKNOWN						((DECODE_RESULT)0xFFFFFFFF)
#define DECODE_RESULT_INVALIDPARAM					((DECODE_RESULT)(DECODE_RESULT_TYPE_ERROR | 1L))
#define DECODE_RESULT_INIT_FAILED					((DECODE_RESULT)(DECODE_RESULT_TYPE_ERROR | 2L))
#define DECODE_RESULT_SYNTAX_ERROR					((DECODE_RESULT)(DECODE_RESULT_TYPE_ERROR | 3L))
#define DECODE_RESULT_OUT_OF_MEMORY					((DECODE_RESULT)(DECODE_RESULT_TYPE_ERROR | 4L))
#define DECODE_RESULT_DECODER_NOT_FOUND				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 1L))
#define DECODE_RESULT_STRING_NOT_FOUND				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 2L))
#define DECODE_RESULT_INVALID_OPERATOR				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 3L))
#define DECODE_RESULT_DECODER_BAD_PARAM				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 4L))
#define DECODE_RESULT_DIVIDE_BY_ZERO				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 5L))
#define DECODE_RESULT_GLOBAL_INDEX_INVALID			((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 6L))
#define DECODE_RESULT_STACK_OVERFLOW				((DECODE_RESULT)(DECODE_RESULT_TYPE_RUNTIME | 7L))

// Stat types
#define DECODE_STAT_INSTRUCTIONS					1
#define DECODE_STAT_TOTAL_FUNCTION_COUNT			2
#define DECODE_STAT_CALLED_FUNCTION_COUNT			3

// Media types. Currently only Ethernet and Token Ring are supported.
typedef UInt8 DECODE_MEDIA;
#define DECODE_MEDIA_ETHERNET						((DECODE_MEDIA)1)
#define DECODE_MEDIA_TOKENRING						((DECODE_MEDIA)2)
#define DECODE_MEDIA_802_11							((DECODE_MEDIA)3)
#define DECODE_MEDIA_WAN							((DECODE_MEDIA)4)

// Timestamp formats. Note: only MACOS_MICROS and PEEK_NANOSECONDS is currently supported.
typedef UInt8 DECODE_TIMESTAMP_FORMAT;
#define DECODE_TIMESTAMP_FORMAT_ANSI_SECS_MICROS	((DECODE_TIMESTAMP_FORMAT)1)
#define DECODE_TIMESTAMP_FORMAT_ANSI_MICROS			((DECODE_TIMESTAMP_FORMAT)2)
#define DECODE_TIMESTAMP_FORMAT_MACOS_MICROS		((DECODE_TIMESTAMP_FORMAT)3)
#define DECODE_TIMESTAMP_FORMAT_SNIFFER				((DECODE_TIMESTAMP_FORMAT)4)
#define DECODE_TIMESTAMP_FORMAT_LANALYZER			((DECODE_TIMESTAMP_FORMAT)5)
#define DECODE_TIMESTAMP_FORMAT_PEEK_NANOSECONDS	((DECODE_TIMESTAMP_FORMAT)6)
#define DECODE_TIMESTAMP_FORMAT_LOCAL_TIME			((DECODE_TIMESTAMP_FORMAT)0x008)

typedef UInt32 DECODE_PACKET_FLAGS;
#define DECODE_PACKET_FLAGS_CRC_ERROR				((DECODE_PACKET_FLAGS)0x00000002)
#define DECODE_PACKET_FLAGS_FRAME_ERROR				((DECODE_PACKET_FLAGS)0x00000004)
#define DECODE_PACKET_FLAGS_OVERSIZE_ERROR			((DECODE_PACKET_FLAGS)0x00000010)
#define DECODE_PACKET_FLAGS_RUNT_ERROR				((DECODE_PACKET_FLAGS)0x00000020)
#define DECODE_PACKET_FLAGS_TRIGGER					((DECODE_PACKET_FLAGS)0x00000040)
#define DECODE_PACKET_FLAGS_SNAP					((DECODE_PACKET_FLAGS)0x00000080)
#define DECODE_PACKET_FLAGS_DROPPED_PKTS			((DECODE_PACKET_FLAGS)0x00000100)
#define DECODE_PACKET_FLAGS_DECRYPTED				((DECODE_PACKET_FLAGS)0x00000200)

typedef UInt32 DECODE_PACKET_STATUS;
#define DECODE_PACKET_STATUS_TRUNCATED				((DECODE_PACKET_STATUS)0x02)
#define DECODE_PACKET_STATUS_SLICED					((DECODE_PACKET_STATUS)0x20)

typedef UInt32 DECODE_OPTIONS;
#define DECODE_OPTIONS_RAW							((DECODE_OPTIONS)0x00000001)
#define DECODE_OPTIONS_ASCII_AS_EBCDIC				((DECODE_OPTIONS)0x00000002)
#define DECODE_OPTIONS_SHOW_OFFSETS					((DECODE_OPTIONS)0x00000004)
#define DECODE_OPTIONS_QUERY_UNKNOWN_TYPES			((DECODE_OPTIONS)0x00000008)
#define DECODE_OPTIONS_DECODE_AS_SEND_PACKET		((DECODE_OPTIONS)0x00000010)
#define DECODE_OPTIONS_DEBUG						((DECODE_OPTIONS)0x00000020)
#define DECODE_OPTIONS_HAS_DECODE_CHOICE			((DECODE_OPTIONS)0x00000040)
#define DECODE_OPTIONS_ASCII_AS_UTF8				((DECODE_OPTIONS)0x00000080)

// this is now obsolete
// #define DECODE_OPTIONS_HAS_VERSION					((DECODE_OPTIONS)0x00000080)	// means that the DECODE_PACKET is versioned 
#define DECODE_OPTIONS_HAS_ENTRY_POINT				((DECODE_OPTIONS)0x00000100)	// function to call first 
#define DECODE_OPTIONS_USE_OBJECTS					((DECODE_OPTIONS)0x00000200)	// use objects in stream 
#define DECODE_OPTIONS_USE_CACHE					((DECODE_OPTIONS)0x00000400)	// use the stream cache 
#define DECODE_OPTIONS_USE_SUMMARY					((DECODE_OPTIONS)0x00000800)	// use the summary 
#define DECODE_OPTIONS_NO_DECODE_STREAM				((DECODE_OPTIONS)0x00001000)	// do not ouput a stream

typedef UInt8 DECODE_TAG_CLASS;
#define DECODE_TAG_CLASS_ENDLINE					((DECODE_TAG_CLASS)1)
#define DECODE_TAG_CLASS_STRING						((DECODE_TAG_CLASS)2)
#define DECODE_TAG_CLASS_VALUE						((DECODE_TAG_CLASS)3)
#define DECODE_TAG_CLASS_PROTOCOL					((DECODE_TAG_CLASS)4)
#define DECODE_TAG_CLASS_ADDRESS					((DECODE_TAG_CLASS)5)
#define DECODE_TAG_CLASS_TIME						((DECODE_TAG_CLASS)6)
#define DECODE_TAG_CLASS_DATADUMP					((DECODE_TAG_CLASS)7)
#define DECODE_TAG_CLASS_PORT						((DECODE_TAG_CLASS)8)
#define DECODE_TAG_CLASS_OBJECT						((DECODE_TAG_CLASS)9)

typedef UInt8 DECODE_TAG_TYPE;
#define DECODE_TAG_TYPE_RAW_STRING					((DECODE_TAG_TYPE)1)
#define DECODE_TAG_TYPE_CSTRING						((DECODE_TAG_TYPE)2)
#define DECODE_TAG_TYPE_PSTRING						((DECODE_TAG_TYPE)3)

#define DECODE_TAG_TYPE_INT8						((DECODE_TAG_TYPE)10)
#define DECODE_TAG_TYPE_INT16						((DECODE_TAG_TYPE)11)
#define DECODE_TAG_TYPE_INT32						((DECODE_TAG_TYPE)12)
#define DECODE_TAG_TYPE_INT64						((DECODE_TAG_TYPE)13)
#define DECODE_TAG_TYPE_FOURCHARCODE				((DECODE_TAG_TYPE)14)
													
#define DECODE_TAG_TYPE_ETHERNET_PROTOCOL			((DECODE_TAG_TYPE)20)
#define DECODE_TAG_TYPE_LSAP_PROTOCOL				((DECODE_TAG_TYPE)21)
#define DECODE_TAG_TYPE_SNAP_PROTOCOL				((DECODE_TAG_TYPE)22)

#define DECODE_TAG_TYPE_ETHERNET_ADDRESS			((DECODE_TAG_TYPE)30)
#define DECODE_TAG_TYPE_TOKENRING_ADDRESS			((DECODE_TAG_TYPE)31)
#define DECODE_TAG_TYPE_IPV4_ADDRESS				((DECODE_TAG_TYPE)32)
#define DECODE_TAG_TYPE_IPV6_ADDRESS				((DECODE_TAG_TYPE)33)
#define DECODE_TAG_TYPE_APPLETALK_SHORT_ADDRESS		((DECODE_TAG_TYPE)34)
#define DECODE_TAG_TYPE_APPLETALK_LONG_ADDRESS		((DECODE_TAG_TYPE)35)
#define DECODE_TAG_TYPE_APPLETALK_DDP_DEST_ADDRESS	((DECODE_TAG_TYPE)36)
#define DECODE_TAG_TYPE_APPLETALK_DDP_SRC_ADDRESS	((DECODE_TAG_TYPE)37)

#define DECODE_TAG_TYPE_ANSI_TIME					((DECODE_TAG_TYPE)40)
#define DECODE_TAG_TYPE_IP_TIME						((DECODE_TAG_TYPE)41)
#define DECODE_TAG_TYPE_AFP_TIME					((DECODE_TAG_TYPE)42)
#define DECODE_TAG_TYPE_NTP_TIME					((DECODE_TAG_TYPE)43)
#define DECODE_TAG_TYPE_SMB_TIME					((DECODE_TAG_TYPE)44)

#define DECODE_TAG_TYPE_IP_PORT						((DECODE_TAG_TYPE)50)
#define DECODE_TAG_TYPE_NW_PORT						((DECODE_TAG_TYPE)51)

typedef UInt8 DECODE_TAG_STYLE;
#define DECODE_TAG_STYLE_PLAIN						((DECODE_TAG_CLASS)0)
#define DECODE_TAG_STYLE_LAYER						((DECODE_TAG_CLASS)1)
#define DECODE_TAG_STYLE_DATA						((DECODE_TAG_CLASS)2)
#define DECODE_TAG_STYLE_HEADER						((DECODE_TAG_CLASS)3)
#define DECODE_TAG_STYLE_MESSAGE					((DECODE_TAG_CLASS)4)
#define DECODE_TAG_STYLE_INVISIBLE					((DECODE_TAG_CLASS)5)
#define DECODE_TAG_STYLE_DUMP						((DECODE_TAG_CLASS)6)
#define DECODE_TAG_STYLE_INDENT						((DECODE_TAG_CLASS)7)
#define DECODE_TAG_STYLE_INDENT_END					((DECODE_TAG_CLASS)8)
#define DECODE_TAG_STYLE_INDENT_DATA				((DECODE_TAG_CLASS)9)
#define DECODE_TAG_STYLE_INDENT_HEADER				((DECODE_TAG_CLASS)10)
#define DECODE_TAG_STYLE_NAME_TABLE					((DECODE_TAG_CLASS)15)

typedef UInt8 DECODE_DISPLAY_TYPE;
#define DECODE_DISPLAY_TYPE_UNSPECIFIED				((DECODE_DISPLAY_TYPE)0)
#define DECODE_DISPLAY_TYPE_BINARY					((DECODE_DISPLAY_TYPE)1)
#define DECODE_DISPLAY_TYPE_SIGNED_DECIMAL			((DECODE_DISPLAY_TYPE)2)
#define DECODE_DISPLAY_TYPE_UNSIGNED_DECIMAL		((DECODE_DISPLAY_TYPE)3)
#define DECODE_DISPLAY_TYPE_HEX						((DECODE_DISPLAY_TYPE)4)
#define DECODE_DISPLAY_TYPE_ASCII					((DECODE_DISPLAY_TYPE)5)
#define DECODE_DISPLAY_TYPE_EBCDIC					((DECODE_DISPLAY_TYPE)6)
#define DECODE_DISPLAY_TYPE_UNICODE					((DECODE_DISPLAY_TYPE)7)

typedef UInt8 DECODE_DISPLAY_FLAGS;
#define DECODE_DISPLAY_FLAG_LINEFEED				((DECODE_DISPLAY_FLAGS)0x01)
#define DECODE_DISPLAY_FLAG_ABSOLUTE_COLUMN			((DECODE_DISPLAY_FLAGS)0x02)
#define DECODE_DISPLAY_FLAG_NO_PREPEND				((DECODE_DISPLAY_FLAGS)0x04)
#define DECODE_DISPLAY_FLAG_DISPLAY_7BIT			((DECODE_DISPLAY_FLAGS)0x08)
#define DECODE_DISPLAY_FLAG_LITTLE_ENDIAN			((DECODE_DISPLAY_FLAGS)0x10)
#define DECODE_DISPLAY_FLAG_SUMMARY					((DECODE_DISPLAY_FLAGS)0x20)
#define DECODE_DISPLAY_FLAG_NO_SUMMARY				((DECODE_DISPLAY_FLAGS)0x40)

typedef UInt8 DECODE_INTERPRET_FORMAT;
#define DECODE_INTERPRET_FORMAT_PLAIN_TEXT			((DECODE_INTERPRET_FORMAT)0x01)
#define DECODE_INTERPRET_FORMAT_RICH_TEXT			((DECODE_INTERPRET_FORMAT)0x02)
#define DECODE_INTERPRET_FORMAT_TAG_TEXT			((DECODE_INTERPRET_FORMAT)0x03)
#define DECODE_INTERPRET_FORMAT_HTML_TEXT			((DECODE_INTERPRET_FORMAT)0x04)
#define DECODE_INTERPRET_FORMAT_JSON_TEXT			((DECODE_INTERPRET_FORMAT)0x05)
#define DECODE_INTERPRET_FLAG_WRITE_HEADER			((DECODE_INTERPRET_FORMAT)0x80)
#define DECODE_INTERPRET_FLAG_WRITE_FOOTER			((DECODE_INTERPRET_FORMAT)0x40)
#define DECODE_INTERPRET_FLAGS_DEFAULT				((DECODE_INTERPRET_FORMAT)0xC0)

// turn this on to reassure yourself that walking the decode stream isn't
// going off course at some point

// #define USE_DECODE_MAGIC		

typedef UInt32 CODE_PAGE;

struct DECODE_TAG
{
#if defined(USE_DECODE_MAGIC)
#define DECODE_MAGIC_NUMBER	0x0dec0de5
	UInt32					nMagicNumber;
#endif
	UInt16					nTagLength;
	DECODE_TAG_CLASS		nTagClass;
	DECODE_TAG_TYPE			nTagType;
	DECODE_DISPLAY_TYPE		nDisplayType;
	DECODE_DISPLAY_FLAGS	nDisplayFlags;
	UInt8					nColumn;
	UInt8					nStyle;
	UInt16					nDataOffset;
	UInt16					nDataSize;
	UInt32					nDataMask;
};
typedef struct DECODE_TAG DECODE_TAG;


#define MAX_DECODER_NAME_LEN 256
struct DECODE_TAG_STREAM
{
	DECODE_TAG*				pTagStream;
	UInt32					nTagStreamLength;
	TCHAR					szDecoderName[MAX_DECODER_NAME_LEN];
};
typedef struct DECODE_TAG_STREAM DECODE_TAG_STREAM;

struct DECODE_TEXT_STREAM
{
	void*					pTextStream;
	UInt32					nTextStreamLength;
};
typedef struct DECODE_TEXT_STREAM DECODE_TEXT_STREAM;

struct DECODE_PACKET
{
	DECODE_MEDIA			nMedia;
	DECODE_TIMESTAMP_FORMAT	nTimestampFormat;
	DECODE_PACKET_FLAGS		nFlags;
	DECODE_PACKET_STATUS	nStatus;
	UInt16					nPacketLength;
	UInt16					nActualLength;
	UInt32					nTimeStampHigh;
	UInt32					nTimeStampLow;
	UInt64					nPacketNumber;
	const UInt8*			pMediaSpecInfo;
	const UInt8*			pPacketData;
	UInt32					nProtoSpec;
};
typedef struct DECODE_PACKET DECODE_PACKET;

struct DECODE_FILE_INFO
{
	DECODE_LIB_VERSION	nFileVersion;
	UInt32				nFileSize;
	TCHAR				szFileName[256];
};

//list of decoder files that have functions that have been called
struct CALLED_FILE_INDEX_LIST
{
	UInt32 * pFileIndexList;
	UInt32 nDecoderCount;
};

typedef CALLED_FILE_INDEX_LIST CALLED_FILE_INDEX_LIST;

// Application-defined callbacks used by DcodLib.
#if defined(_WIN32)
typedef bool (CALLBACK *NameLookupProc)( DECODE_TAG_CLASS inClass, DECODE_TAG_TYPE inType,
							const UInt8* inAddress, COLORREF* outColor, TCHAR* outName );
typedef SInt16 (CALLBACK *ChooseDecoderProc)( SInt16 inNumDecoders, 
							TCHAR* inDecoderNames, SInt16 inDefaultDecoder );

typedef void (CALLBACK *ParseErrorProc)( TCHAR * inDecoderName, UInt32 inLineNumber );
#endif

struct DECODE_CALLBACKS
{
	NameLookupProc			fNameLookupProc;
	ChooseDecoderProc		fChooseDecoderProc;
	//UserProc				fUserProc;
};
typedef struct DECODE_CALLBACKS DECODE_CALLBACKS;

typedef LPCTSTR DECODE_LOCATION;

_DCOD_API DECODE_LIB_VERSION WINAPI
DcodGetLibVersion( void );

_DCOD_API DECODE_RESULT WINAPI
DcodSetDecodePlugin( TCHAR* inPlugin );

_DCOD_API DECODE_RESULT WINAPI
DcodLoadDecoders( DECODE_LOCATION pDecoderDirectory, DECODE_LIB_REF* outLibRef );

_DCOD_API DECODE_RESULT WINAPI
DcodUnloadDecoders( DECODE_LIB_REF inLibRef );

_DCOD_API DECODE_RESULT WINAPI
DcodResetState( DECODE_LIB_REF inLibRef );

class XDebugger;

_DCOD_API DECODE_RESULT WINAPI
DcodPacketToTagStream( DECODE_LIB_REF inLibRef, const DECODE_PACKET* inPacket,
	DECODE_OPTIONS inOptions, CODE_PAGE inCodePage, DECODE_TAG_STREAM* outTagStream,
	XDebugger* pDebugger=NULL );

_DCOD_API DECODE_RESULT WINAPI
DcodFreeTagStream( DECODE_TAG_STREAM* inTagStream );

_DCOD_API DECODE_RESULT WINAPI
DcodAllocTagStream( DECODE_TAG_STREAM* inTagStream, UInt32 inStreamLength );

_DCOD_API DECODE_RESULT WINAPI
DcodInterpretTagStream( DECODE_LIB_REF inLibRef, DECODE_INTERPRET_FORMAT inFormat,
const DECODE_PACKET* inPacket, DECODE_OPTIONS inOptions, CODE_PAGE inCodePage,
	const DECODE_TAG_STREAM* inTagStream, DECODE_TEXT_STREAM* outTextStream );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatTextHeader( DECODE_INTERPRET_FORMAT inFormat, DECODE_TEXT_STREAM* outTextStream );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatTextFooter( DECODE_INTERPRET_FORMAT inFormat, DECODE_TEXT_STREAM* outTextStream );

_DCOD_API DECODE_RESULT WINAPI
DcodFreeTextStream( DECODE_TEXT_STREAM* inTextStream );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatValue( TCHAR* outString, SInt32 inValue, UInt32 inMask,
	UInt8 inValueSize, UInt8 inDisplayType, UInt8 inDisplayFlags );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatOffset( TCHAR* outString, UInt16 inOffset, UInt16 inSize, UInt32 inMask );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatTimeStampToTime( TCHAR* outString, DECODE_TIMESTAMP_FORMAT inFormat,
	UInt32 inTimeStampHigh, UInt32 inTimeStampLow );

_DCOD_API DECODE_RESULT WINAPI
DcodFormatTimeStampToDate( TCHAR* outString, DECODE_TIMESTAMP_FORMAT inFormat,
	UInt32 inTimeStampHigh, UInt32 inTimeStampLow );

_DCOD_API DECODE_RESULT WINAPI
DcodGetCallbacks( DECODE_LIB_REF inLibRef, DECODE_CALLBACKS* outCallbacks );

_DCOD_API DECODE_RESULT WINAPI
DcodSetCallbacks( DECODE_LIB_REF inLibRef, DECODE_CALLBACKS* inCallbacks );

_DCOD_API DECODE_RESULT WINAPI
DcodCountDecodeFiles( DECODE_LIB_REF inLibRef, UInt32* outDecodeFiles );

_DCOD_API DECODE_RESULT WINAPI
DcodGetDecodeFileInfo( DECODE_LIB_REF inLibRef, UInt32 inIndex, 
	DECODE_FILE_INFO* outFileInfo );

_DCOD_API DECODE_RESULT WINAPI
DcodGetCalledFileIndexList( DECODE_LIB_REF inLibRef, CALLED_FILE_INDEX_LIST * outIndexList );

_DCOD_API DECODE_RESULT WINAPI
DcodFreeCalledFileIndexList( CALLED_FILE_INDEX_LIST * inIndexList );

_DCOD_API DECODE_RESULT WINAPI
DcodCheckDecoderSyntax( DECODE_LIB_REF inLibRef, ParseErrorProc fParseErrorCallback );

_DCOD_API DECODE_RESULT WINAPI
DcodGetStat( DECODE_LIB_REF inLibRef, UInt32 inStatID, UInt32* outStat );

// #define TIMING

#if defined(TIMING)
_DCOD_API DECODE_RESULT WINAPI
DcodGetTiming( DECODE_LIB_REF inLibRef, void** pPosition, UInt32* outSpec, 
				UInt64* outCount, UInt64* outCycles );
#endif

_DCOD_API DECODE_RESULT WINAPI
DcodDecodeOp( DECODE_LIB_REF inDecodeContext, DECODE_LIB_STATE inDecodeState, 
			UInt8 nOp, UInt32 nValue, UInt32 nGlobal, UInt8 nStyleValue, 
			UInt8 nStyleLabel, TCHAR* pszString, TCHAR* pszSummary );

_DCOD_API DECODE_RESULT WINAPI
DcodAddUserDecode( DECODE_LIB_REF inDecodeContext,  TCHAR* pszFuncName );


typedef PeekPlugCallback_( int,		CallUserDecodeCallbackProc	)
(
	PeekPlugin::PluginAppContext	inAppContext,		//state
	PeekPlugin::PluginContext		inContext,			//decodeContext
	TCHAR*				pszFuncName,
	DECODE_PACKET*		pPacket
);


#if defined(_WIN32)
#pragma pack(pop)
#endif

#ifdef __cplusplus
}
#endif

#endif /* _DCOD_H_ */
