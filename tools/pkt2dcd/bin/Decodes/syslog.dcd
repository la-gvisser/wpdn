// SYSLOG
//  udp port 514
//  RFC 3164 & RFC 3195
// si: the way we're reaching syslog is by going through "tcp rsh"
//	there's a check in there to jump to here if it was through UDP!
//	but also, that could still be syslog... so we reach here and can get punted
//	back to rsh dependent on if the spaces match...

void Syslog;
	if (g[16] > 0)
	{
		if (g[20] == 1)
		{
			TNXT -Syslog::Reliable;
		}
		TNXT -Syslog::Main;
	}
	TRTS;

// -----------------------------------------------------------
//	Reliable

void Syslog::Reliable;
	LABL 0 0 0 b1 Syslog;
	Display All Lines;
	TRTS;

// -----------------------------------------------------------
//	main

void Syslog::Main;
	LABL 0 0 0 b1 Syslog;
	Syslog::Priority;
	if ( pb[0] == 0x32 )
	{
		INCR 1;					// Get rid of the space after the ">".
	}
	Syslog::HeaderCheck;
	Syslog::Message;
	TRTS;

// -----------------------------------------------------------
//	PRI Part

void Syslog::Priority;
	
	//si: stupid thing... can be 3, 4, or 5 bytes
	l[1] = pb[4];
	l[2] = pb[5];
	l[3] = pb[6];
	if (l[1] == 0x3e)
	{
		LABL 0 0 00 c7 Priority;
		CHR# 5 0 90 c2 Value:;
		Syslog::Priority::Value::3;
		LABL 0 0 00 c8;
		TRTS;
	}
	if (l[2] == 0x3e)
	{
		LABL 0 0 00 c7 Priority;
		CHR# 6 0 90 c2 Priority Value:;
		Syslog::Priority::Value::4;
		LABL 0 0 00 c8;
		TRTS;
	}
	if (l[3] == 0x3e)
	{
		LABL 0 0 00 c7 Priority;
		CHR# 7 0 90 c2 Priority Value:;
		Syslog::Priority::Value::5;
		LABL 0 0 00 c8;
		TRTS;
	}

	//si: hmmm... if we've reached here...there's an error!
	TRTS;

//si: the equation is this:
//		8[facility] + [severity] = [value in pkt]
//	[value] / 8 = [facility]
//	[value] - [facility] = [severity]
//	[facility] == 0-20 only
//	[severity] == 0-7 only

void Syslog::Priority::Value::Main;
	g[2] = g[1];
	g[2] /= 8;			
	DGLB 0 2 90 c2 Facility:;
	CST# 0 2 00 14 Syslog::Priority::Facility_List;
	g[2] *= 8;
	g[1] -= g[2];
	DGLB 0 1 90 c2 Severity:;
	CST# 0 1 00 14 Syslog::Priority::Severity_List;
	TRTS;

void Syslog::Priority::Value::3;
	DECR 4;
	//si: get the 3 bytes
	g[1] = pb[0];
	g[2] = pb[1];
	g[3] = pb[2];
	INCR 4;
	//si: convert to decimal
	g[1] -= 48;
	g[2] -= 48;
	g[3] -= 48;
	//si: make them into a whole number
	g[1] *= 100;
	g[2] *= 10;
	g[1] += g[2];
	g[1] += g[3];		//si: g[1] now has your value
	TNXT -Syslog::Priority::Value::Main;
	
void Syslog::Priority::Value::4;
	DECR 5;
	//si: get the 4 bytes
	g[1] = pb[0];
	g[2] = pb[1];
	g[3] = pb[2];
	g[4] = pb[3];
	INCR 5;
	//si: convert to decimal
	g[1] -= 48;
	g[2] -= 48;
	g[3] -= 48;
	g[4] -= 48;
	//si: make them into a whole number
	g[1] *= 1000;
	g[2] *= 100;
	g[3] *= 10;
	g[1] += g[2];
	g[1] += g[3];
	g[1] += g[4];		//si: g[1] now has your value
	TNXT -Syslog::Priority::Value::Main;

void Syslog::Priority::Value::5;
	DECR 6;
	//si: get the 5 bytes
	g[1] = pb[0];
	g[2] = pb[1];
	g[3] = pb[2];
	g[4] = pb[3];
	g[5] = pb[4];
	INCR 6;
	//si: convert to decimal
	g[1] -= 48;
	g[2] -= 48;
	g[3] -= 48;
	g[4] -= 48;
	g[5] -= 48;
	//si: make them into a whole number
	g[1] *= 10000;
	g[2] *= 1000;
	g[3] *= 100;
	g[4] *= 10;
	g[1] += g[2];
	g[1] += g[3];
	g[1] += g[4];
	g[1] += g[5];		//si: g[1] now has your value
	TNXT -Syslog::Priority::Value::Main;

str# Syslog::Priority::Facility_List;
	 0	| kernel messages;
	 1	| user-level messages;
	 2	| mail system;
	 3	| system daemons;
	 4	| security/authorization messages (note 1);
	 5	| messages generated internally by syslogd;
	 6	| line printer subsystem;
	 7	| network news subsystem;
	 8	| UUCP subsystem;
	 9	| clock daemon (note 2);
	10	| security/authorization messages (note 1);
	11	| FTP daemon;
	12	| NTP subsystem;
	13	| log audit (note 1);
	14	| log alert (note 1);
	15	| clock daemon (note 2);
	16	| local use 0  (local0);
	17	| local use 1  (local1);
	18	| local use 2  (local2);
	19	| local use 3  (local3);
	20	| local use 4  (local4);
	21	| local use 5  (local5);
	22	| local use 6  (local6);
	23	| local use 7  (local7);

str# Syslog::Priority::Severity_List;
	0	| Emergency: system is unusable;
	1	| Alert: action must be taken immediately;
	2	| Critical: critical conditions;
	3	| Error: error conditions;
	4	| Warning: warning conditions;
	5	| Notice: normal but significant condition;
	6	| Informational: informational messages;
	7	| Debug: debug-level messages;

void Syslog::HeaderCheck;
	// If first 4 chars aren't Jan-Dec, this ain't a header.
	SCMP 4 0  0  0 Jan ;
	SKIP 80000001;
	Syslog::Header();
	
	SCMP 4 0  0  0 Feb ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Mar ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Apr ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 May ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Jun ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Jul ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Aug ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Sep ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Oct ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Nov ;
	SKIP 80000001;
	Syslog::Header();

	SCMP 4 0  0  0 Dec ;
	SKIP 80000001;
	Syslog::Header();

// -----------------------------------------------------------
//	Header Part
//si: contains a timestamp in the format of: Mmm dd hh:mm:ss
//	and the hostname [can be name or ipv4 address]
//	so to make it easy, let's look for the 4th space since it has to be in chr format

void Syslog::Header;
	LABL 0 0 00 b7 Header;
	CHR# 10 0 90 c2 Time Stamp:;
	GSTR 20000020 1;
	CHR# 0 1 90 c2 Host Name:;
	LABL 0 0 00 b8;
	TRTS;

// -----------------------------------------------------------
//	Message Part

void Syslog::Message;
	TGTE 0 10 0 0 RETURN;
	LABL 0 0 00 b7 Message;
	Display All Lines;
	LABL 0 0 00 b8;
	TRTS;