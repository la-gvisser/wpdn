// ISDN Q.921-User Adaptation Layer

//notes:
// - used by SCTP
// blah blah blah shuddup, no you, no you!
// g[0xa] = message length
// g[0xb] = param length

void Q921()
{
	Q921::Header;
	if (g[0xa] <= 0)
	{
		TRTS;
	}
	Q921::IUA_Message_Header;
	if (g[0xa] <= 0)
	{
		TRTS;
	}
	Q921::Parameter::Tags;
	TRTS;
}

// -------------------------------------------------------------

void Q921::Header()
{
	LABL( 0, 0, 0, 0xb1, "ISDN Q.921 User Adaptation Layer");
	DBYT( 0, g[1], 0x90, 0xc2, "Version:");
	DBYT( 0, g[1], 0x90, 0xc2, "Reserved:");
	DBYT( 0, g[2], 0x90, 0xc2, "Message Class:");
	CST#( 0, g[2], 0x00, 0x14, "Q921::Message_Class_List");
	DBYT( 0, g[3], 0x90, 0xc2, "Message Type:");
	Q921::Header::Message_Type;
	DLNG( 0, g[0xa], 0x90, 0xc2, "Message Length:");
	g[0xa] -= 8;
}

void Q921::Header::Message_Type()
{
	if (g[2] == 0)	{
		CST#( 0, g[3], 0x00, 0x14, "Q921::Message_Type::MGMT");
	}
	if (g[2] == 3)	{
		CST#( 0, g[3], 0x00, 0x14, "Q921::Message_Type::ASPSM");
	}
	if (g[2] == 4)	{
		CST#( 0, g[3], 0x00, 0x14, "Q921::Message_Type::ASPTM");
	}
	if (g[2] == 5)	{
		CST#( 0, g[3], 0x00, 0x14, "Q921::Message_Type::QPTM");
	}
}

// -------------------------------------------------------------

void Q921::IUA_Message_Header()
{
	LABL( 0, 0, 0, 0xb7, "IUA Message Header");
	DWRD( 0, g[2], 0x90, 0xc2, "Tag:");
	 CEQU( 1, g[2], 0x0, 0x14, "Interface Identifier (integer)");
	 CEQU( 3, g[2], 0x0, 0x14, "Interface Identifier (text)");
	DWRD( 0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xa] -= g[0xb];
	g[0xb] -= 4;
	if (g[2] == 1)
	{
		if (g[0xb] == 1)
		{
			DBYT( 0, g[0xb], 0x90, 0xc2, "Integer:");
			g[0xb] -= 1;
		}
		if (g[0xb] == 2)
		{
			DWRD( 0, g[0xb], 0x90, 0xc2, "Integer:");
			g[0xb] -= 2;
		}
		if (g[0xb] == 4)
		{
			DLNG( 0, g[0xb], 0x90, 0xc2, "Integer:");
			g[0xb] -= 4;
		}
		if (g[0xb] > 0) 
		{
			DUMP( 0, g[0xb], 0x90, 0xc2, "Integer:");
		}
	}
	if (g[2] == 3)
	{
		CHR#( 0, g[0xb], 0x90, 0xc2, "Text:");
		g[0xb] = 0;
	}
	if (g[0xb] > 0)
	{
		DUMP( 0, g[0xb], 0x90, 0xc2, "Value:");
		g[0xb] = 0;
	}
	LABL( 0, 0, 0, 0xb8);
	
	if (g[0xa] > 0)
	{
		Q921::Parameter::Tag_05;
	}
	TRTS;
}

void Q921::Parameter::Tag_05()
{
	LABL( 0, 0, 0, 0xb7, "DLCI\DLCI:");
	DWRD( 0, g[1], 0x90, 0xc2, "Tag:");
	LABL( 0, 0, 0, 0x14, "DLCI");
	DWRD( 0, g[0xb], 0x90, 0xc2, "Length:");
	LABL( 0, 0, 0, 0xb9, "DLCI");
	 BBIT( 1, 1, 0x90, 0xc4, ".... ...0 Zero Bit:");
	 BBIT( 1, 1, 0x90, 0xc4, ".... ..x. Spare Bit:");
	 BBIT( 6, 1, 0x90, 0xc4, "xxxx xx.. SAPI:");
	 LABL( 0, 0, 0x00, 0x14, "Service Access Point Identifier");
	 BBIT( 1, 1, 0x90, 0xc4, ".... ...1 One Bit:");
	 BBIT( 7, 1, 0x90, 0xc4, "xxxx xxx. TEI:");
	 LABL( 0, 0, 0x00, 0x14, "Terminal Endpoint Identifier");
	 LABL( 0, 0, 0, 0xb8);
	HWRD( 0, g[1], 0x90, 0xc2, "Spare:");
	LABL( 0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tags()
{
	g[1] = pw[0];
	TSB#(0, g[1], 0, 0, "Q921::Parameter::Tag_List");
}

str# Q921::Parameter::Tag_List;
	0x04 | Q921::Parameter::Tag::0x04;
	0x09 | Q921::Parameter::Tag::0x09;
	0x0a | Q921::Parameter::Tag::0x0a;
	0x0b | Q921::Parameter::Tag::0x0b;
	0x0c | Q921::Parameter::Tag::0x0c;
	0x0d | Q921::Parameter::Tag::0x0d;
	0x0e | Q921::Parameter::Tag::0x0e;
	0x0f | Q921::Parameter::Tag::0x0f;
	0x10 | Q921::Parameter::Tag::0x10;

// -------------------------------------------------------------


void Q921::Parameter::Tag::0x04()
{
	Q921::Parameter::Tag::INFO_String;
	TRTS;
}

void Q921::Parameter::Tag::0x09()
{
	LABL(0, 0, 0, 0xb7, "Heartbeat Data");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Heartbeat Data");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	if (g[0xb] > 0)
	{
		DUMP( 0, g[0xb], 0x90, 0xc2, "Heartbeat Data:");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::0x0a()
{
	Q921::Parameter::Tag::Reason;
	Q921::Parameter::Tag::INFO_String;
}

void Q921::Parameter::Tag::0x0b()
{
	Q921::Parameter::Tag::Traffic_Mode_Type;
	g[1] = pw[0];
	if (g[1] == 1)			//si: optional
	{
		Q921::Parameter::Tag::Interface_Identifiers;
		Q921::Parameter::Tag::INFO_String;
		g[1] = 0;
	}
	if (g[1] == 3)			//si: optional
	{
		Q921::Parameter::Tag::Interface_Identifiers;
		Q921::Parameter::Tag::INFO_String;
	}
}

void Q921::Parameter::Tag::0x0c()
{
	Q921::Parameter::Tag::Error_Code;
	g[1] = pw[0];
	if (g[1] == 7)			//si: diagnostic_info is optional
	{
		Q921::Parameter::Tag::Diagnostic_Info;
	}
}

void Q921::Parameter::Tag::0x0d()
{
	Q921::Parameter::Tag::Status;
	g[1] = pw[0];
	if (g[1] == 1)			//si: optional
	{
		Q921::Parameter::Tag::Interface_Identifiers;
		Q921::Parameter::Tag::INFO_String;
		g[1] = 0;
	}
	if (g[1] == 3)			//si: optional
	{
		Q921::Parameter::Tag::Interface_Identifiers;
		Q921::Parameter::Tag::INFO_String;
	}
}

void Q921::Parameter::Tag::0x0e()
{
	LABL(0, 0, 0, 0xb7, "Protocol Data");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Protocol Data");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	if (g[0xb] > 0)
	{
		//h323hostcall;			//si: this seems to work but how do i know it's right!?
		DUMP(0, g[0xb], 0x90, 0xc2, "Protocol Data:");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::0x0f()
{
	Q921::Parameter::Tag::Reason;
	TRTS;
}

void Q921::Parameter::Tag::0x10()
{
	LABL(0, 0, 0, 0xb7, "Status");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Status");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	DLNG(0, g[1], 0x90, 0xc2, "Status:");
	 CEQU(1, g[1], 0x0, 0x14, "TEI is considered assigned by Q.921");
	 CEQU(2, g[1], 0x0, 0x14, "TEI is considered unassigned by Q.921");
	LABL(0, 0, 0, 0xb8);
	TRTS;
}


// -------------------------------------------------------------

void Q921::Parameter::Tag::Traffic_Mode_Type()
{
	LABL(0, 0, 0, 0xb7, "Traffic Mode Type");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Traffic Mode Type");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	HLNG(0, g[1], 0x90, 0xc2, "Traffic Mode Type:");
	 CEQU(1, g[1], 0x0, 0x14, "Over-ride");
	 CEQU(2, g[1], 0x0, 0x14, "Load-share");
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::Interface_Identifiers()
{
	LABL(0, 0, 0, 0xb7, "Interface Identifiers");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");						//si: 1==integer, 3==string
	LABL(0, g[1], 0x00, 0x14, "Interface Identifiers");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	if (g[0xb] > 0)
	{
		DUMP(0, g[0xb], 0x90, 0xc2, "Interface Identifiers:");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::INFO_String()
{
	LABL(0, 0, 0, 0xb7, "INFO String");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Info String");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	if (g[0xb] > 0)
	{
		CHR#( 0, g[0xb], 0x90, 0xc2, "INFO:");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::Reason()
{
	LABL(0, 0, 0, 0xb7, "Reason");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Reason");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	HLNG(0, g[1], 0x90, 0xc2, "Reason:");
	 CEQU(0, g[1], 0x0, 0x14, "Management layer generated release");
	 CEQU(1, g[1], 0x0, 0x14, "Physical layer alarm generated release");
	 CEQU(2, g[1], 0x0, 0x14, "Indicates Layer 2 SHOULD release and deny all requests from signaling channel");
	 CEQU(3, g[1], 0x0, 0x14, "Other reasons");
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::Error_Code()
{
	LABL(0, 0, 0, 0xb7, "Reason");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Reason");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	HLNG(0, g[1], 0x90, 0xc2, "Error Code:");
	CST#(0, g[1], 0x0 0x14, "Q921::Parameter::Tag::Error_Code::List");
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

str# Q921::Parameter::Tag::Error_Code::List;
	0x01 | Invalid Version;
	0x02 | Invalid Interface Identifier;
	0x03 | Unsupported Message Class;
	0x04 | Unsupported Message Type;
	0x05 | Unsupported Traffic Handling Mode;
	0x06 | Unexpected Message;
	0x07 | Protocol Error;
	0x08 | Unsupported Interface Identifier Type;
	0x09 | Invalid Stream Identifier;
	0x0a | Unassigned TEI;
	0x0b | Unrecognized SAPI;
	0x0c | Invalid TEI, SAPI combination;

void Q921::Parameter::Tag::Diagnostic_Info()
{
	LABL(0, 0, 0, 0xb7, "Diagnostic Information");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Diagnostic Information");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	if (g[0xb] > 0)
	{
		DUMP(0, g[0xb], 0x90, 0xc2, "Diagnostic Info:");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}

void Q921::Parameter::Tag::Status()
{
	LABL(0, 0, 0, 0xb7, "Status");
	DWRD(0, g[1], 0x90, 0xc2, "Tag:");
	LABL(0, g[1], 0x00, 0x14, "Status");
	DWRD(0, g[0xb], 0x90, 0xc2, "Length:");
	g[0xb] -= 4;
	DWRD(0, g[2], 0x90, 0xc2, "Status Type:");
	 CEQU(1, g[2], 0x0, 0x14, "Application Server state change");
	 CEQU(2, g[2], 0x0, 0x14, "Other");
	if (g[2] == 1)
	{
		DWRD(0, g[1], 0x90, 0xc2, "Status Identification:");
		 CEQU(1, g[1], 0x0, 0x14, "Application Server Down (AS_Down)");
		 CEQU(2, g[1], 0x0, 0x14, "Application Server Inactive (AS_Inactive)");
		 CEQU(3, g[1], 0x0, 0x14, "Application Server Active (AS_Active)");
		 CEQU(0, g[1], 0x0, 0x14, "Application Server Pending (AS_Pending)");
	}
	if (g[2] == 2)
	{
		DWRD(0, g[1], 0x90, 0xc2, "Status Identification:");
		 CEQU(1, g[1], 0x0, 0x14, "Insufficient ASP resources active in AS");
		 CEQU(2, g[1], 0x0, 0x14, "Alternate ASP Active");
	}
	LABL(0, 0, 0, 0xb8);
	TRTS;
}





// -------------------------------------------------------------
//  STRINGS
// -------------------------------------------------------------

str# Q921::Message_Class_List;
     0 | Management (MGMT) Message;
     1 | Transfer Messages;
     2 | SS7 Signalling Network Management (SSNM) Messages;
     3 | ASP State Maintenance (ASPSM) Messages;
     4 | ASP Traffic Maintenance (ASPTM) Messages;
     5 | Q.921-Q.931 Boundary Primitives Transport (QPTM) Messages;
     6 | MTP2 User Adaptation (MAUP) Messages;
     7 | Connectionless Messages;
     8 | Connection-Oriented Messages;

// -------------------------------------------------------------

str# Q921::Message_Type::MGMT;				//class = 0
	0 | Error (ERR);
	1 | Notify (NTFY);
	2 | TEI Status Request;
	3 | TEI Status Confirm;
	4 | TEI Status Indication;

str# Q921::Message_Type::ASPSM;				//class = 3
	0 | Reserved;
	1 | ASP Up (UP);
	2 | ASP Down (DOWN);
	3 | Heartbeat (BEAT);
	4 | ASP Up Ack (UP ACK);
	5 | ASP Down Ack (DOWN ACK);
	6 | Heatbeat Ack (BEAT ACK);

str# Q921::Message_Type::ASPTM;				//class = 4
	0 | Reserved;
	1 | ASP Active (ACTIVE);
	2 | ASP Inactive (INACTIVE);
	3 | ASP Active Ack (ACTIVE ACK);
	4 | ASP Inactive Ack (INACTIVE ACK);

str# Q921::Message_Type::QPTM;				//class = 5
	 0 | Reserved;
	 1 | Data Request Message;
	 2 | Data Indication Message;
	 3 | Unit Data Request Message;
	 4 | Unit Data Indication Message;
	 5 | Establish Request;
	 6 | Establish Confirm;
	 7 | Establish Indication;
	 8 | Release Request;
	 9 | Release Confirm;
	10 | Release Indication;

