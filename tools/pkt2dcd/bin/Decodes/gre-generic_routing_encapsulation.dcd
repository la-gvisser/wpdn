* GRE - Generic Routing Encapsulation

void GRE;
	LABL 0 0 0 b1 GRE - Generic Routing Encapsulation\GRE:;
	GWRD 0 1;					*Passive read flags into G1
	ANDG 7 1;					*Last 3 bits (network order) have the the version number
	TEQU 0 1  0 0 GRE_v0;
	TEQU 1 1  0 0 GRE_v1;
	TNXT -GRE_vUnknown;
	
void GRE_v0;
	BWRD 0 5 90 c9 Flags:;
		CBIT f 5 00 d4 1....... ........ Checksum Present;
		CLSE 0 0 00 d4 0....... ........ Checksum Not Present;
		CBIT e 5 00 d4 .1...... ........ Routing Present;
		CLSE 0 0 00 d4 .0...... ........ Routing Not Present;
		CBIT d 5 00 d4 ..1..... ........ Key Present;
		CLSE 0 0 00 d4 ..0..... ........ Key Not Present;
		CBIT c 5 00 d4 ...1.... ........ Sequence Number Present;
		CLSE 0 0 00 d4 ...0.... ........ Sequence Number Not Present;
		CBIT b 5 00 d4 ....1... ........ Strict Source Route;
		CLSE 0 0 00 d4 ....0... ........ Not all Strict Source Routes;
		l[1] = g[5];
		ANDG 700 41;
		SHFR 8 41;
		CST# 0 41 00 d4 GRE_v0::Flags_Recur;
		CLSE 0 00 00 d4 .....000 ........ Recursion Control: 0;
		l[1] = g[5];
		ANDG f8 41;
		SHFR 3 41;
		LABL 0 00 00 d4 ........ xxxxx... Flags:;
		DGLB 0 41 04 00 ;
		l[1] = g[5];
		ANDG 7 41;
		CST# 0 41 00 d4 GRE_v0::Flags_Version;
		CLSE 0 00 00 d4 ........ .....000 Version: 0;
		LABL 0 0 00 c8;

	
	HWRD 0 1 90 c2 Protocol Type:;
	CST# 0 1 0 14 EProto::Names_Str;
	g[62] = g[1];
	
	// checksum
	l[1] = g[5];
	ANDG 8000 41;
	if (l[1] != 0)
	{
		HWRD 0 0 90 c2 Checksum:;
		DWRD 0 0 90 c2 Offset:;
	}
	
	// key
	l[1] = g[5];
	ANDG 2000 41;
	if (l[1] != 0)
	{
		HLNG 0 0 90 c2 Key:;
	}
	
	// sequence number
	l[1] = g[5];
	ANDG 1000 41;
	if (l[1] != 0)
	{
		DLNG 0 0 90 c2 Sequence Number:;
	}
	
	// routing
	l[1] = g[5];
	ANDG 4000 41;
	if (l[1] != 0)
	{
		
	}
	
	l[1] = pb[0];
	if (l[1] == 0x7e)
	{
		INCR 1;
	}
	if ( g[62] == 0x6558)
	{
		LABL 0 0 0 14 Transparent Ethernet bridging;
		LABL 0 0 0 b1 Ethernet Type 2\Ethernet 2:;
			ETHR 0 0 90 c2 Destination:\D:;
			ETHR 0 0 90 c2 Source:\S:;
		g[1] = pw[0];
		if (g[1] <= 0x5dc)
		{
			802_2();				//SI: so this used to tsub into 802_2 but now if you go to 802_2, you are it
			TRTS;					//		because it would go into ether::Branching_2 ... which would show a protocol type... and that's no good!
		}
		if (g[1] == 0x8808)			//ethernet PAUSE frame - for gig
		{
			802.3::MAC_Control;
			TRTS;
		}
		TGTE 0 10 0 0 RETURN;		*si: stop if there's no data left!!!!
		if (g[1] == 0x886F)			
		{
			TRTS;
		}
		Ether::Branching_2();
		
		//TNXT -Ether::Branching;
	}
	if ( g[62] == 0xffff)
	{
		GRE_Reserved_Link;
	}
	TST#( 0, g[62], 0, 0, GRE::IEEE80211::ARUBA::LOAD );
	if ( g[62] != 0xffff)
	{
		TNXT -Ether::Branching_3;
	}

	TRTS;

str# GRE::IEEE80211::ARUBA::LOAD;
0x8200	|	ARUBA::MNGT;
0x8210	|	ARUBA::MNGT;
0x8220	|	ARUBA::MNGT;
0x8230	|	ARUBA::MNGT;
0x8240	|	ARUBA::MNGT;
0x8250	|	ARUBA::MNGT;
0x8260	|	ARUBA::MNGT;
0x8270	|	ARUBA::MNGT;
0x8280	|	ARUBA::MNGT;
0x8290	|	ARUBA::MNGT;
0x82A0	|	ARUBA::MNGT;
0x82B0	|	ARUBA::MNGT;
0x82C0	|	ARUBA::MNGT;
0x82D0	|	ARUBA::MNGT;
0x82E0	|	ARUBA::MNGT;
0x82F0	|	ARUBA::MNGT;
0x8300	|	ARUBA::MNGT;
0x8310	|	ARUBA::MNGT;
0x8320	|	ARUBA::MNGT;
0x8330	|	ARUBA::MNGT;
0x8340	|	ARUBA::MNGT;
0x8350	|	ARUBA::MNGT;
0x8360	|	ARUBA::MNGT;
0x8370	|	ARUBA::MNGT;

str# GRE_v0::Flags_Recur;
	.....001 ........ Recursion Control: 1;
	.....010 ........ Recursion Control: 2;
	.....011 ........ Recursion Control: 3;
	.....100 ........ Recursion Control: 4;
	.....101 ........ Recursion Control: 5;
	.....110 ........ Recursion Control: 6;
	.....111 ........ Recursion Control: 7;

str# GRE_v0::Flags_Version;
	.....001 ........ Version: 1;
	.....010 ........ Version: 2;
	.....011 ........ Version: 3;
	.....100 ........ Version: 4;
	.....101 ........ Version: 5;
	.....110 ........ Version: 6;
	.....111 ........ Version: 7;

void GRE_v1;
	BBIT d 1 90 b9 Flags:;
	INCR 1;
	DECR 2;
	 DBIT 1 1 d5 0;
	  CEQU 1 1 0 d4 1... .... .... .... Checksum Present;
	  CLSE 0 0 0 d4 0... .... .... .... Checksum Not Present;
	 DBIT 1 1 d5 0;
	  CEQU 1 1 0 d4 .1.. .... .... .... Routing Present;
	  CLSE 0 0 0 d4 .0.. .... .... .... Routing Not Present;
	 DBIT 1 1 d5 0;
	  CEQU 1 1 0 d4 ..1. .... .... .... Key Present;
	  CLSE 0 0 0 d4 ..0. .... .... .... Key Not Present;
	 DBIT 1 3 d5 0;												*SI: save for use below
	  CEQU 1 3 0 d4 ...1 .... .... .... Sequence Number Present;
	  CLSE 0 0 0 d4 ...0 .... .... .... Sequence Number Not Present;
	 DBIT 1 1 d5 0;
	  CEQU 1 1 0 d4 .... 1... .... .... Strict Source Route Present;
	  CLSE 0 0 0 d4 .... 0... .... .... Strict Source Route Not Present;
	 DBIT 3 1 d5 d4 .... .000 .... .... Recursion Control (Set to zero);
	 DBIT 1 8 d5 0;												*SI: save for use below
	  CEQU 1 8 0 d4 .... .... 1... .... Acknowledgment Sequence Number Present;
	  CLSE 0 0 0 d4 .... .... 0... .... Acknowledgment Sequence Number Not Present;
	 DBIT 4 1 d5 d4 .... .... .000 0... Flags (Must be set to zero);
	LABL 0 0 0 b8;
	DBIT 3 1 90 c2 Version:;
	HWRD 0 1 90 c2 Protocol Type:;					*SI: SAVE!!!! this throws you into the next function!
	MOVE 1 82;
	EProto::Names;									
	DWRD 0 1 90 c2 Payload Length:;
	MOVE 1 99;										*SI: save in g[19] for ppp
	DWRD 0 1 90 c2 Call ID:;
	SNEQ 1 3;
	SKIP 1;
	 DLNG 0 1 90 c2 Sequence Num:;
	SNEQ 1 8;
	SKIP 1;
	 DLNG 0 1 90 c2 Ack Num:;
	
	MOVE 2 81;
	TST#( 0, g[62], 0, 0, GRE::IEEE80211::ARUBA::LOAD );
	TNXT -Ether::Branching_3;
	
	TRTS;

void GRE_vUnknown;
	LABL 0 0 90 c2 Unknown GRE Version;
	TRTS;

	//TT for J.H. //dw: let's do it here, something like GRE Reserved Protocoltype!
void GRE_Reserved_Link()
{
	IP;
}

* end GRE
