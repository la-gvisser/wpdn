//ASAP - Aggregate Server Access Protocol
//source: https://tools.ietf.org/html/rfc5352
//

str# SCTP::Payload_Prot_ID;
11	|	ASAP - Aggregate Server Access Protocol;
str# SCTP::Payload_Prot_ID::Func;
11 |  ASAP;


void ASAP()
{
	LABL( 0, 0, 0, 0xb1, "ASAP - Aggregate Server Access Protocol" );
	DBYT( 0, l[1], 0x90, 0xc2, "Type:" );
		CST#( 0, l[1], 0, 0x14, ASAP::MessageType );
		CLSE( 0, 0, 0, 0x14, "Reserved by IETF" );
	BBYT( 0, l[2], 0x90, 0xc2, "Flags:" );
		if (l[1] == 3)
		{
			CBIT( 0, l[2], 0x0, 0xd4, ".......0 Reject Bit: not set" );
			CLSE( 0, l[2], 0x0, 0xd4, ".......1 Reject Bit: set" );
		}
		if (l[1] == 5)
		{
			CBIT( 0, l[2], 0x0, 0xd4, ".......0 S Bit: no Dynamic updates are requested" );
			CLSE( 0, l[2], 0x0, 0xd4, ".......1 S Bit: the Home ENRP server to send updates to this Pool dynamically" );
		}
		if (l[1] == 6)
		{
			CBIT( 0, l[2], 0x0, 0xd4, ".......0 A Bit: not set" );
			CLSE( 0, l[2], 0x0, 0xd4, ".......1 A Bit: set" );
		}
		if (l[1] == 7)
		{
			CBIT( 0, l[2], 0x0, 0xd4, ".......0 H Bit: not set" );
			CLSE( 0, l[2], 0x0, 0xd4, ".......1 H Bit: set" );
		}
	DWRD( 0, l[3], 0x90, 0xc2, "Length:" );
	if (l[1] == 1)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "Pool Element Parameter:" );
	}
	if (l[1] == 2)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "PE Identifier Parameter:" );
	}
	if (l[1] == 3)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "PE Identifier Parameter:" );
		if (l[3] > 8)
		{
			l[3] -= 8;
			HEX#( 0, l[3], 0x90, 0xc2, " Operational Error:" );
		}
	}
	if (l[1] == 4)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "PE Identifier Parameter:" );
		if (l[3] > 8)
		{
			l[3] -= 8;
			HEX#( 0, l[3], 0x90, 0xc2, " Operational Error:" );
		}
	}
	if (l[1] == 5)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
	}
	if (l[1] == 6)
	{
		while (l[3] != 0)
		{
			DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
			DLNG( 0, l[5], 0x90, 0xc2, "Overall PE Selection Policy:" );
			l[3] -= 8;
		}
	}
	if (l[1] == 7)
	{		
		DLNG( 0, l[4], 0x90, 0xc2, "Server Identifier:" );
		DLNG( 0, l[5], 0x90, 0xc2, "Pool Handle Parameter:" );
	}
	if (l[1] == 8)
	{		
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "PE Identifier Parameter:" );
	}
	if (l[1] == 9)
	{		
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		DLNG( 0, l[5], 0x90, 0xc2, "PE Identifier Parameter:" );
	}
	if (l[1] == 0xa)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		l[3] -= 4;
		while (l[3] != 0)
		{
			DLNG( 0, l[5], 0x90, 0xc2, "Transport Param:" );
			l[3] -= 4;
		}
	}
	if (l[1] == 0xb)
	{		
		while (l[3] != 0)
		{
			DLNG( 0, l[5], 0x90, 0xc2, "Cookie Parameter:" );
			l[3] -= 4;
		}
		//DLNG( 0, l[4], 0x90, 0xc2, "Cookie Parameter:" );
	}
	if (l[1] == 0xc)
	{		
		DLNG( 0, l[4], 0x90, 0xc2, "Cookie Parameter:" );
	}
	if (l[1] == 0xd)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Pool Handle Parameter:" );
		l[3] -= 4;
		while (l[3] != 0)
		{
			DLNG( 0, l[5], 0x90, 0xc2, "Pool Element Parameter:" );
			l[3] -= 4;
		}
	}
	if (l[1] == 0xe)
	{
		DLNG( 0, l[4], 0x90, 0xc2, "Operational Error Parameter:" );
	}
	LABL 0 0 0 b8;
}
str# ASAP::MessageType;
0x01  |  ASAP_REGISTRATION;
0x02  |  ASAP_DEREGISTRATION;
0x03  |  ASAP_REGISTRATION_RESPONSE;
0x04  |  ASAP_DEREGISTRATION_RESPONSE;
0x05  |  ASAP_HANDLE_RESOLUTION;
0x06  |  ASAP_HANDLE_RESOLUTION_RESPONSE;
0x07  |  ASAP_ENDPOINT_KEEP_ALIVE;
0x08  |  ASAP_ENDPOINT_KEEP_ALIVE_ACK;
0x09  |  ASAP_ENDPOINT_UNREACHABLE;
0x0a  |  ASAP_SERVER_ANNOUNCE;
0x0b  |  ASAP_COOKIE;
0x0c  |  ASAP_COOKIE_ECHO;
0x0d  |  ASAP_BUSINESS_CARD;
0x0e  |  ASAP_ERROR;


