void WAP::Binary_XML()
{
	LABL( 0, 0, 0, 0xb1, "WAP Binary XML");
	HBYT( 0, l[1], 0x90, 0xc2, "Version:");
	CST#( 0, l[1], 0, 0x14, WAP::Version_Str);
	l[1] = pb[0];
	if (l[1] == 0xA2)
	{
		INCR 1;
	}
	HBYT( 0, l[1], 0x90, 0xc2, "Public Identifier:\PID:");
	 CEQU( 4, l[1], 0, 0x14, "-/WAPForum/DTD WML 1.1/EN (WML 1.1)");
	 CEQU( 8, l[1], 0, 0x14, "-/Phone.com/DTD WML 1.1/EN (WML+ 1.1)");
	HBYT( 0, l[1], 0x90, 0xc2, "Character Set:\");
	 CEQU( 3, l[1], 0, 0x14, "US-ASCII");
	 CEQU( 0x6A, l[1], 0, 0x14, "UTF-8");
	WSP::Add_Length_Test();
	DGLB( 0, g[5], 0x90, 0xc9, "String Table Length:\");
	INCR 1;
	WAP::String_Table();
	LABL( 0, 0, 0, 0xc8);
	LABL( 0, 0, 0, 0xb8);
	WAP::Data();
	LABL( 0, 0, 0, 0xb8);
}

void WAP::String_Table()
{
	while (g[5] != 0)
	{
		WAP::00_Byte_Loop();
		DECR 0 4;
		CHR#( 0, g[4], 0x90, 0xc2, "String:\");
		LABL( 0, 0, 0, 0x14, "length (");
		ADDG 1 4;
		DGLB( 0, g[4], 4, 0x14);
		LABL( 0, 0, 0, 4, ")");
		INCR 1;
		g[5] -= g[4];
	}
}

void WAP::Data()
{
	LABL( 0, 0, 0, 0xb7, "WBXML Data");
	l[1] = pb[0];
	while (l[1] != 1)
	{
		l[10] = pb[0];
		l[10] = g[16];
		TSB#( 0, l[1], 0, 0, WAP::WBXML_Check);
		l[1] = pb[0];
		if (l[1] == 0)
		{
			DECR 1;
			LABL( 0, 0, 0, 0xb8);
			TRTS;
		}
		if (l[10] == g[16])
		{
			LABL( 0, 0, 0, 0xb8);
			TRTS;
		}
	}
	HBYT( 0, l[1], 0x90, 0xc2, "End Tag:\");
	LABL( 0, 0, 0, 0x14 "</wml>");
	LABL( 0, 0, 0, 0xb8);
}

void WAP::Known_Tag()
{
	HBYT( 0, l[1], 0x90, 0xc2, "WBXML Token:\");
	CST#( 0, l[1], 0, 0x14, WAP::WBXML_Token_Str);
}

void WAP::Known_Attribute()
{
	HBYT( 0, l[1], 0x90, 0xc9, "WBXML Attribute:\");
	CST#( 0, l[1], 0, 0x14, WAP::WBXML_Attribute_Str);
	l[1] = pb[0];
	if (l[1] == 0)
	{
		HWRD( 0, l[1], 0x90, 0xc2, "Switch Page");
	}
	if (l[1] == 3)
	{
		WAP::Inline_String_Parse();
	}
	l[1] = pb[0];
	if (l[1] == 0x42)
	{
		WAP::00_Byte_Loop();
		DECR 0 4;
		CHR#( 0, g[4], 0x90, 0xc2, "Ext. Token (EXT-I-2):\");
		INCR 1;
	}
	if (l[1] == 0x80)
	{
		WAP::Extension_Token();
	}
	if (l[1] == 0x83)
	{
		WAP::Table_Ref();
	}
	if (l[1] == 0x82)
	{
		WAP::Extension_Token();
	}
	LABL( 0, 0, 0, 0xc8);
}

void WAP::Table_Ref()
{

	l[1] = pw[0];
	if (l[1] == 0x8381)
	{
		HEX#( 3, 0, 0x90, 0xc2, "Table Ref String:\");
		TRTS;
	}
	if (l[1] == 0x8382)
	{
		HEX#( 3, 0, 0x90, 0xc2, "Table Ref String:\");
		TRTS;
	}
	if (l[1] == 0x8383)
	{
		HEX#( 3, 0, 0x90, 0xc2, "Table Ref String:\");
		TRTS;
	}
	if (l[1] != 0x8384)
	{
		HWRD( 0, l[1], 0x90, 0xc2, "Table Ref String:\");
	}

}

void WAP::WBXML_Token()
{
	l[2] = pb[0];
	WAP::Known_Tag();
	WAP::WBXML_Check_Loop();
	HBYT( 0, l[1], 0x90, 0xc2, "End Tag:\");
	l[2] -= 0x40;
	CST#( 0, l[2], 0, 0x14, WAP::WBXML_Token_Str);
}

void WAP::Token_Tag_End_Tag()
{
	WAP::Known_Tag();
	WAP::Known_Attribute_Loop();
	HBYT( 0, l[1], 0x90, 0xc2, "End Tag:\");
	LABL( 0, 0, 0, 0x14 "/>");
}

void WAP::WBXML_Token_Attribute()
{
	l[2] = pb[0];
	WAP::Known_Tag;
	WAP::Known_Attribute_Loop();
	HBYT( 0, l[1], 0x90, 0xc2, "End Attribute:\");
	LABL( 0, 0, 0, 0x14 ">");
	WAP::WBXML_Check_Loop();
	HBYT( 0, l[1], 0x90, 0xc2, "End Tag:\");
	l[2] -= 0xC0;
	CST#( 0, l[2], 0, 0x14, WAP::WBXML_Token_Str);
}

void WAP::Extension_Token()
{
	HWRD( 0, l[1], 0x90, 0xc2, "Extension Token:\");
	CST#( 0, l[1], 0, 0x14, WAP::Extension_Token_Str);
}

void WAP::Token_Tag_Entity()
{
	INCR 1;
	HWRD( 0, l[1], 0x90, 0xc2, "Entity:\");
	CST#( 0, l[1], 0, 0x14, WAP::Entity_Str);
}

void WAP::00_Byte_Loop;
	MOVE 0 4;
	TNXT -WAP::00_Byte_Loop_Helper;

void WAP::00_Byte_Loop_Helper;
	GBYT 0 1;
	TEQU 0 1 0 0 RETURN;
	INCR 1;
	ADDG 1 4;
	TNXT -WAP::00_Byte_Loop_Helper;

void WAP::WBXML_Check_Loop()
{
	l[1] = pb[0];
	while (l[1] != 1)
	{
		BYTO( 0, l[2], 0, 0);
		TSB#( 0, l[1], 0, 0, WAP::WBXML_Check);
		l[1] = pb[0];
		if (l[1] == 0)
		{
			TRTS;
		}
		l[1] = pb[0];
		if (l[1] == 3)
		{
			WAP::Inline_String_Parse();
		}
		l[1] = pb[0];
		if (l[1] == 0x80)
		{
			WAP::Extension_Token();
		}
		l[1] = pb[0];
		if (l[1] == 0x82)
		{
			WAP::Extension_Token();
		}
		l[1] = pb[0];
		if (l[1] == 0x83)
		{
			WAP::Table_Ref();
		}
		BYTO( 0, l[3], 0, 0);
		if (l[2] == l[3])
		{
			TRTS;
		}
		l[1] = pb[0];
	}
}

void WAP::Known_Attribute_Loop()
{
	l[1] = pb[0];
	if (l[1] == 0)
	{
		HWRD( 0, l[1], 0x90, 0xc2, "Switch Page");
	}
	while (l[1] != 1)
	{
		WAP::Known_Attribute();
		l[1] = pb[0];
	}
}

void WAP::Inline_String_Parse()
{
	HBYT( 0, l[1], 0x90, 0xc2, "Inline String:\");
	WAP::00_Byte_Loop();
	DECR 0 4;
	CHR#( 0, g[4], 0x24, 0);
	INCR 1;
}

str# WAP::Version_Str;
	1 | 1.1;
	2 | 1.2;
	3 | 1.3;	

str# WAP::WBXML_Check;
	0x02 | WAP::Token_Tag_Entity;
	0x1B | WAP::Known_Tag;
	0x1C | WAP::Known_Tag;
	0x1D | WAP::Known_Tag;
	0x1E | WAP::Known_Tag;
	0x1F | WAP::Known_Tag;
	0x20 | WAP::Known_Tag;
	0x21 | WAP::Known_Tag;
	0x22 | WAP::Known_Tag;
	0x23 | WAP::Known_Tag;
	0x24 | WAP::Known_Tag;
	0x25 | WAP::Known_Tag;
	0x26 | WAP::Known_Tag;
	0x27 | WAP::Known_Tag;
	0x28 | WAP::Known_Tag;
	0x29 | WAP::Known_Tag;
	0x2A | WAP::Known_Tag;
	0x2B | WAP::Known_Tag;
	0x2C | WAP::Known_Tag;
	0x2D | WAP::Known_Tag;
	0x2E | WAP::Known_Tag;
	0x2F | WAP::Known_Tag;
	0x30 | WAP::Known_Tag;
	0x31 | WAP::Known_Tag;
	0x32 | WAP::Known_Tag;
	0x33 | WAP::Known_Tag;
	0x34 | WAP::Known_Tag;
	0x35 | WAP::Known_Tag;
	0x36 | WAP::Known_Tag;
	0x37 | WAP::Known_Tag;
	0x38 | WAP::Known_Tag;
	0x39 | WAP::Known_Tag;
	0x3B | WAP::Known_Tag;
	0x3C | WAP::Known_Tag;
	0x3D | WAP::Known_Tag;
	0x3E | WAP::Known_Tag;
	0x3F | WAP::Known_Tag;
	0x5B | WAP::WBXML_Token;
	0x5C | WAP::WBXML_Token;
	0x5D | WAP::WBXML_Token;
	0x5E | WAP::WBXML_Token;
	0x5F | WAP::WBXML_Token;
	0x60 | WAP::WBXML_Token;
	0x61 | WAP::WBXML_Token;
	0x62 | WAP::WBXML_Token;
	0x63 | WAP::WBXML_Token;
	0x64 | WAP::WBXML_Token;
	0x65 | WAP::WBXML_Token;
	0x66 | WAP::WBXML_Token;
	0x67 | WAP::WBXML_Token;
	0x68 | WAP::WBXML_Token;
	0x69 | WAP::WBXML_Token;
	0x6A | WAP::WBXML_Token;
	0x6B | WAP::WBXML_Token;
	0x6C | WAP::WBXML_Token;
	0x6D | WAP::WBXML_Token;
	0x6E | WAP::WBXML_Token;
	0x6F | WAP::WBXML_Token;
	0x70 | WAP::WBXML_Token;
	0x71 | WAP::WBXML_Token;
	0x72 | WAP::WBXML_Token;
	0x73 | WAP::WBXML_Token;
	0x74 | WAP::WBXML_Token;
	0x75 | WAP::WBXML_Token;
	0x76 | WAP::WBXML_Token;
	0x77 | WAP::WBXML_Token;
	0x78 | WAP::WBXML_Token;
	0x79 | WAP::WBXML_Token;
	0x7B | WAP::WBXML_Token;
	0x7C | WAP::WBXML_Token;
	0x7D | WAP::WBXML_Token;
	0x7E | WAP::WBXML_Token;
	0x7F | WAP::Known_Tag;
	0xA0 | WAP::Token_Tag_End_Tag;
	0xA1 | WAP::Token_Tag_End_Tag;
	0xA2 | WAP::Token_Tag_End_Tag;
	0xA3 | WAP::Token_Tag_End_Tag;
	0xA4 | WAP::Token_Tag_End_Tag;
	0xA5 | WAP::Token_Tag_End_Tag;
	0xA6 | WAP::Token_Tag_End_Tag;
	0xA7 | WAP::Token_Tag_End_Tag;
	0xA8 | WAP::Token_Tag_End_Tag;
	0xA9 | WAP::Token_Tag_End_Tag;
	0xAA | WAP::Token_Tag_End_Tag;
	0xAB | WAP::Token_Tag_End_Tag;
	0xAC | WAP::Token_Tag_End_Tag;
	0xAD | WAP::Token_Tag_End_Tag;
	0xAE | WAP::Token_Tag_End_Tag;
	0xAF | WAP::Token_Tag_End_Tag;
	0xB0 | WAP::Token_Tag_End_Tag;
	0xB1 | WAP::Token_Tag_End_Tag;
	0xB2 | WAP::Token_Tag_End_Tag;
	0xB3 | WAP::Token_Tag_End_Tag;
	0xB4 | WAP::Token_Tag_End_Tag;
	0xB5 | WAP::Token_Tag_End_Tag;
	0xB6 | WAP::Token_Tag_End_Tag;
	0xB7 | WAP::Token_Tag_End_Tag;
	0xB8 | WAP::Token_Tag_End_Tag;
	0xB9 | WAP::Token_Tag_End_Tag;
	0xBB | WAP::Token_Tag_End_Tag;
	0xBC | WAP::Token_Tag_End_Tag;
	0xBD | WAP::Token_Tag_End_Tag;
	0xBE | WAP::Token_Tag_End_Tag;
	0xBF | WAP::Token_Tag_End_Tag;
	0xDB | WAP::WBXML_Token_Attribute;
	0xDC | WAP::WBXML_Token_Attribute;
	0xDD | WAP::WBXML_Token_Attribute;
	0xDE | WAP::WBXML_Token_Attribute;
	0xDF | WAP::WBXML_Token_Attribute;
	0xE0 | WAP::WBXML_Token_Attribute;
	0xE1 | WAP::WBXML_Token_Attribute;
	0xE2 | WAP::WBXML_Token_Attribute;
	0xE3 | WAP::WBXML_Token_Attribute;
	0xE4 | WAP::WBXML_Token_Attribute;
	0xE5 | WAP::WBXML_Token_Attribute;
	0xE6 | WAP::WBXML_Token_Attribute;
	0xE7 | WAP::WBXML_Token_Attribute;
	0xE8 | WAP::WBXML_Token_Attribute;
	0xE9 | WAP::WBXML_Token_Attribute;
	0xEA | WAP::WBXML_Token_Attribute;
	0xEB | WAP::WBXML_Token_Attribute;
	0xEC | WAP::WBXML_Token_Attribute;
	0xED | WAP::WBXML_Token_Attribute;
	0xEE | WAP::WBXML_Token_Attribute;
	0xEF | WAP::WBXML_Token_Attribute;
	0xF0 | WAP::WBXML_Token_Attribute;
	0xF1 | WAP::WBXML_Token_Attribute;
	0xF2 | WAP::WBXML_Token_Attribute;
	0xF3 | WAP::WBXML_Token_Attribute;
	0xF4 | WAP::WBXML_Token_Attribute;
	0xF5 | WAP::WBXML_Token_Attribute;
	0xF6 | WAP::WBXML_Token_Attribute;
	0xF7 | WAP::WBXML_Token_Attribute;
	0xF8 | WAP::WBXML_Token_Attribute;
	0xF9 | WAP::WBXML_Token_Attribute;
	0xFB | WAP::WBXML_Token_Attribute;
	0xFC | WAP::WBXML_Token_Attribute;
	0xFD | WAP::WBXML_Token_Attribute;
	0xFE | WAP::WBXML_Token_Attribute;
	0xFF | WAP::WBXML_Token_Attribute;

str# WAP::WBXML_Token_Str;
	0x1B | <pre/>;
	0x1C | <a/>;
	0x1D | <td/>;
	0x1E | <tr/>;
	0x1F | <table/>;
	0x20 | <p/>;
	0x21 | <postfield/>;
	0x22 | <anchor/>;
	0x23 | <access/>;
	0x24 | <b/>;
	0x25 | <big/>;
	0x26 | <br/>;
	0x27 | <card/>;
	0x28 | <do/>;
	0x29 | <em/>;
	0x2A | <fieldset/>;
	0x2B | <go/>;
	0x2C | <head/>;
	0x2D | <i/>;
	0x2E | <img/>;
	0x2F | <input/>;
	0x30 | <meta/>;
	0x31 | <noop/>;
	0x32 | <prev/>;
	0x33 | <onevent/>;
	0x34 | <optgroup/>;
	0x35 | <option/>;
	0x36 | <refresh/>;
	0x37 | <select/>;
	0x38 | <small/>;
	0x39 | <strong/>;
	0x3B | <template/>;
	0x3C | <timer/>;
	0x3D | <u/>;
	0x3E | <setvar/>;
	0x3F | <wml/>;
	0x5B | <pre>;
	0x5C | <a>;
	0x5D | <td>;
	0x5E | <tr>;
	0x5F | <table>;
	0x60 | <p>;
	0x61 | <postfield>;
	0x62 | <anchor>;
	0x63 | <access>;
	0x64 | <b>;
	0x65 | <big>;
	0x66 | <br>;
	0x67 | <card>;
	0x68 | <do>;
	0x69 | <em>;
	0x6A | <fieldset>;
	0x6B | <go>;
	0x6C | <head>;
	0x6D | <i>;
	0x6E | <img>;
	0x6F | <input>;
	0x70 | <meta>;
	0x71 | <noop>;
	0x72 | <prev>;
	0x73 | <onevent>;
	0x74 | <optgroup>;
	0x75 | <option>;
	0x76 | <refresh>;
	0x77 | <select>;
	0x78 | <small>;
	0x79 | <strong>;
	0x7B | <template>;
	0x7C | <timer>;
	0x7D | <u>;
	0x7E | <setvar>;
	0x7F | <wml>;
	0xA0 | <p;
	0xA1 | <postfield;
	0xA2 | <anchor;
	0xA3 | <access;
	0xA4 | <b;
	0xA5 | <big;
	0xA6 | <br;
	0xA7 | <card;
	0xA8 | <do;
	0xA9 | <em;
	0xAA | <fieldset;
	0xAB | <go;
	0xAC | <head;
	0xAD | <i;
	0xAE | <img;
	0xAF | <input;
	0xB0 | <meta;
	0xB1 | <noop;
	0xB2 | <prev;
	0xB3 | <onevent;
	0xB4 | <optgroup;
	0xB5 | <option;
	0xB6 | <refresh;
	0xB7 | <select;
	0xB8 | <small;
	0xB9 | <strong;
	0xBB | <template;
	0xBC | <timer;
	0xBD | <u;
	0xBE | <setvar;
	0xBF | <xml;
	0xDB | <pre;
	0xDC | <a;
	0xDD | <td;
	0xDE | <tr;
	0xDF | <table;
	0xE0 | <p;
	0xE1 | <postfield;
	0xE2 | <anchor;
	0xE3 | <access;
	0xE4 | <b;
	0xE5 | <big;
	0xE6 | <br;
	0xE7 | <card;
	0xE8 | <do;
	0xE9 | <em;
	0xEA | <fieldset;
	0xEB | <go;
	0xEC | <head;
	0xED | <i;
	0xEE | <img;
	0xEF | <input;
	0xF0 | <meta;
	0xF1 | <noop;
	0xF2 | <prev;
	0xF3 | <onevent;
	0xF4 | <optgroup;
	0xF5 | <option;
	0xF6 | <refresh;
	0xF7 | <select;
	0xF8 | <small;
	0xF9 | <strong;
	0xFB | <template;
	0xFC | <timer;
	0xFD | <U;
	0xFE | <setvar;
	0xFF | <wml;

str# WAP::WBXML_Attribute_Str;
	0x05 | accept-charset=;
	0x06 | align='bottom';
	0x07 | align='center';
	0x08 | align='left';
	0x09 | align='middle';
	0x0A | align='right';
	0x0B | align='top';
	0x0C | alt=;
	0x0D | content=;
	0x0F | domain=;
	0x10 | emptyok='false';
	0x11 | emptyok='true';
	0x12 | format=;
	0x13 | height=;
	0x14 | hspace=;
	0x15 | ivalue=;
	0x16 | iname=;
	0x18 | label=;
	0x19 | localsrc=;
	0x1A | maxlength=;
	0x1B | method='get';
	0x1C | method='post';
	0x1D | mode='nowrap';
	0x1E | mode='wrap';
	0x1F | multiple='false';
	0x20 | multiple='true';
	0x21 | name=;
	0x22 | newcontext='false';
	0x23 | newcontext='true';
	0x24 | onpick=;
	0x25 | onenterbackward=;
	0x26 | onenterforward=;
	0x27 | ontimer=;
	0x28 | optional='false';
	0x29 | optional='true';
	0x2A | path=;
	0x2E | scheme=;
	0x2F | sendreferer='false';
	0x30 | sendreferer='true';
	0x31 | size=;
	0x32 | src=;
	0x33 | ordered='true';
	0x34 | ordered='false';
	0x35 | tabindex=;
	0x36 | title=;
	0x37 | type=;
	0x38 | type='accept';
	0x39 | type='delete';
	0x3A | type='help';
	0x3B | type='password';
	0x3C | type='onpick';
	0x3D | type='onenterbackward';
	0x3E | type='onenterforward';
	0x3F | type='ontimer';
	0x45 | type='options';
	0x46 | type='prev';
	0x47 | type='reset';
	0x48 | type='text';
	0x49 | type='vnd.';
	0x4A | href=;
	0x4B | href="http:/";
	0x4C | href="https:/";
	0x4D | value=;
	0x4E | vspace=;
	0x4F | width=;
	0x50 | xml:lang=;
	0x52 | align=;
	0x53 | columns=;
	0x54 | class=;
	0x55 | id=;
	0x56 | forua='false';
	0x57 | forua='true';
	0x58 | src="http:/";
	0x59 | src="https:/";
	0x5A | http-equiv=;
	0x5B | http-equiv='content-type';
	0x5C | content='application/vnd.wap.wmlc';
	0x5D | http-equiv='expires';
	0x5E | accesskey=;
	0x5F | enctype=;
	0x60 | enctype='application/x-www-form-urlencoded';
	0x61 | enctype='multipart/for';
	0x62 | xml:space='preserve';
	0x63 | xml:space='default';
	0x64 | cache-control='no-cache';
	0x7E | (requested token is not defined for this content type);
	0x7F | (requested token code page is not defined for this content type);
	0x85 | .com/;
	0x86 | .edu/;
	0x87 | .net/;
	0x88 | .org/;
	0x89 | accept;
	0x8A | bottom;
	0x8B | clear;
	0x8C | delete;
	0x8D | help;
	0x8E | "http:/";
	0x8F | "http:/www.";
	0x90 | "https:/";
	0x91 | "https:/www.";
	0x93 | middle;
	0x94 | nowrap;
	0x95 | onpick;
	0x96 | onenterbackward;
	0x97 | onenterforward;
	0x98 | ontimer;
	0x99 | options;
	0x9A | password;
	0x9B | reset;
	0x9D | text;
	0x9E | top;
	0x9F | unknown;
	0xA0 | wrap;
	0xA1 | www.;
	0xFE | (requested token is not defined for this content type);
	0xFF | (requested token is not defined for this content type);

str# WAP::Extension_Token_Str;
	0x8042 | 'msg';
	0x8206 | 'pin';
	0x8217 | 'deviceNumber';
	0x8231 | 'pin2';
	0x8246 | 'findHandle';
	0x820A | 'signupHandle';
	0x820F | 'r';

str# WAP::Entity_Str;
	0x8120 | &#160;

